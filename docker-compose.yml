version: "3.8"

services:
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        volumes:
            - ./frontend:/app
            - /app/node_modules
            - ./frontend/next.config.js:/app/next.config.js
        environment:
            - NEXT_PUBLIC_API_URL=http://localhost:5000
            - WATCHPACK_POLLING=true
            - CHOKIDAR_USEPOLLING=true
            - PORT=3000
            - NODE_ENV=development
        depends_on:
            backend:
                condition: service_healthy
        tty: true
        stdin_open: true
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - app-network

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        ports:
            - "5000:5000"
        volumes:
            - ./backend:/app
            - /app/node_modules
        environment:
            - DATABASE_URL=mongodb://root:example@mongodb:27017/vehicle-app?authSource=admin&directConnection=true&replicaSet=rs0
            - PORT=5000
            - FRONTEND_URL=http://localhost:3000
        command: >
            sh -c "yarn prisma generate &&
                   yarn prisma:push &&
                   yarn prisma:seed &&
                   yarn start:dev"
        depends_on:
            mongodb:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        networks:
            - app-network

    mongodb:
        build:
            context: ./mongodb
            dockerfile: Dockerfile
        ports:
            - "27017:27017"
        restart: always
        volumes:
            - mongodb_data:/data/db
        command: mongod --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all
        healthcheck:
            test: >
                echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}) }" | 
                mongosh -u root -p example --authenticationDatabase admin
                --quiet
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 60s
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example
            MONGO_INITDB_DATABASE: vehicle-app
        networks:
            - app-network

volumes:
    mongodb_data:

networks:
    app-network:
        driver: bridge
