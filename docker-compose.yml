version: "3.8"

services:
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        volumes:
            - ./frontend:/app
            - /app/node_modules
        environment:
            - NEXT_PUBLIC_API_URL=http://host.docker.internal:5000
            - WATCHPACK_POLLING=true
            - CHOKIDAR_USEPOLLING=true
            - PORT=3000
        depends_on:
            - backend
        extra_hosts:
            - "host.docker.internal:host-gateway"

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        ports:
            - "5000:5000"
        volumes:
            - ./backend:/app
            - /app/node_modules
        environment:
            - MONGODB_URI=mongodb://mongodb:27017/myapp
            - PORT=5000
            - FRONTEND_URL=http://localhost:3000
        depends_on:
            - mongodb

    mongodb:
        image: mongo:latest
        ports:
            - "27017:27017"
        command: ["--replSet", "rs0", "--bind_ip_all"]
        volumes:
            - mongodb_data:/data/db
        healthcheck:
            test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongosh --quiet) -eq 1
            interval: 10s
            start_period: 30s

    mongo-init:
        image: mongo:latest
        restart: "no"
        depends_on:
            mongodb:
                condition: service_healthy
        command: >
            mongosh --host mongodb:27017 --eval '
            if (rs.status().ok === 0) {
                rs.initiate({
                    _id: "rs0",
                    members: [{ _id: 0, host: "mongodb:27017" }]
                })
            }
            '

volumes:
    mongodb_data:
